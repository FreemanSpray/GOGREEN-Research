GOGREEN Class README

This class was originally created by Christian Harris to be an efficient and extensible plotting interface for the data from the GOGREEN survey. It was designed to have only a single public (meaing intended for calling by the end user) method, the Plot method, and a single public member variable, standardCriteria. A user would first specify their search criteria by storing any number of queries to the GOGREEN catalog in the standardCriteria variable, then would call plot(), specifying the data characteristics to serve as the x and y axes, to produce a plot of the data that matched all provided criteria. Many other optional parameters were available to the user in the Plot method as well, most being ways to alter the presentation of the data but some allowing the user to alter the criteria without relying on the standardCriteria variable, for example the param:useMembers allowing users to restrict based on membership requirements defined in the class itself rather than in the survey catalog.

In his original README, Christian described the code of the Plot method as being structured with KISS (Keep It Simple Stupid) design. This means each use case of the method is written separately (largely relying on nested IF blocks) and without reliance on helper functions, all without regard for reuse of code. The benefit of this structure is it makes it easy for future programmers to understand the workings of a specific case at a glance and to extend the functionality of the class without worry for impacting the functionality of the other cases. This allowed the class to be adapted for other projects as it will eventually need to be, while still keeping it simple enough that it can have broad application on its own.

The version of the class you have before you now is one I have adapted and reworked to be specifically suited to research related to the environmental dependence of the stellar mass-size relation of galaxies in the survey. The need to construct and examine trendlines for this relation saw the addition of multiple private/helper methods as well as four more public methods: testPlots(), plotMcNabPlots(), evalLineFit() and compTrends(). I also reworked most of the functions previously created for the class, for two primary reasons:

    1. I heavily refactored the Plot() function to step away from KISS design principles, sacrificing some readability in favor of efficiency. This was done partly for the sake of speed, but more so to make the function more easily adaptable to my project's specific needs in the future, as while the simple code structure made it easy to add new features in the same vein as the original ones, each new feature made it increasingly difficult to implement global adjustments to the method, something that was necessary to provide more advanced functionality like trendlines.

    2. Flag-based catalog implementation: the previous version of this class applied restriction criteria to the GOGREEN catalog by storing the catalog in variables and reducing the size of this catalog with each added restriction. This made adjustments to the pre-existing codebase, as well as general debugging, more difficult as it was not possible to reverse these reductions. Instead we turned to an implementation that utilizes only the base catalog, adding additional columns that act as 'flags' at compilation that can then be read at runtime to determine what category a galaxy belongs to.


The Plot Method

This function was originally the only public method of the class, designed to be the single interface for the user to the survey. After refactoring, it is still the primary interface for the user, however the portion of its functionality related to the treatment and plotting of the data are now handled by a private method, plotUnwrapped(). The plot() method is responsible for the following:

    1. Initializing the plot and choosing colors (colors are population-based if not specified by user).
    2. Constructing a list of additional criteria (a separate list from those stored in the standardCriteria member variable) to be applied to the data. This includes membership specifications (based on param:useMembers) and cluster specifications (based on param:plotType).
    3. Calls plotUnwrapped() in the appropriate way based on param:plotType (i.e. call is made 11 times for plot type 2, subplots)
    4. Formats plots appropriately based on param:plotType

Return: the plot() method returns the same four return values returned by plotUnwrapped() (the size of the data being plotted, divided along population lines and for both the x and y axis. These return values are used only for testing accuracy, for example in the testPlots() method). Note that for plot type 2, these returns are totalled up first.

Usage: the plot() method has three mandatory parameters: param:xQuantityName and param:yQuantityName which specify the values to plot on the respective axes, and param:plotType which determines whether galaxies from only a single cluster should be plotted, or galaxies from all clusters should be plotted in separate subplots or in a stack. Note that if the first of these plot types is used, param:clusterName is also to be considered mandatory, as the plot will fail to complete without it. param:clusterName does nothing if another plot type is used.

There are 13 additional parameters beyond the 4 specified above that alter how the data is presented, by changing either ... :

- the data selection 
    - param:useStandards
    - param:useMembers
- the format of the data
    - param:useLog
- the population divides of the data
    - param:colorType
- the aesthetics of the plot 
    - param:xRange
    - param:yRange
    - param:xLabel
    - param:yLabel
    - param:colors
- the plotting of additional information
    - param:fitline
    - param:bootstrap
    - param:plotErrBars
    - param:plotTransitionType

An important note is that the following 8 parameters are not utilized directly in plot(), but are included to be passed to plotUnwrapped(): 
- param:xQuantityName
- param:yQuantityName
- param:useStandards
- param:useLog
- param:fitline
- param:bootstrap
- param:plotErrBars
- param:plotTransitionType 

Information regarding the data types, default and accepted values of all 17 parameters (as for all other methods) can be found in the documentation above the method in GOGREEN.py. 


The TestPlots Method

The testPlots() method was created to act as a security check whenever large-scale changes were made to the code. It produces a number of plots and analyzes the amount of galaxies plotted in order to verify the following functionality of the class:

    1. Every plotted x value has a corresponding y value.
    2. Different xQuantityName and yQuantityName values do not impact the number of galaxies plotted.
    3. The total number of galaxies plotted in each individual cluster (total of 11 plots of plot type 1) is the same as the number of cluster galaxies plotted in a stack (plot type 3). The same is done for the field sample associated with each cluster. It is also verified that these numbers are consistent for different population splits (i.e. quiescent vs star-forming).
    4. The numbers produced in this test are correct according to the truth values specified in the file GOGREEN-Research\Notebooks\truth.txt. Note that if changes have been made to the codebase that intentionally alter the number of data points plotted by the plot() method, this truth file is no longer valid and will cause this test to fail. I recommend first verifying all other tests pass, then verifying through some other means that the specific numbers of galaxies being plotted are valid, then finally replacing the data in GOGREEN-Research\Notebooks\truth.txt with the data output by the testPlots() method, located in GOGREEN-Research\Notebooks\testOutput.txt.

The CompTrends Method

The compTrends() method acts as a hub for methods of analyzing the stellar mass-size relation trends for the survey. It can be run with one of three distinct modules, specified with param:plotType: 

    1. default: plots four bare trendlines (quiescent and star-forming cluster vs field) and returns the two ratios of cluster over field trends at an X or Y value specified with param:x or param:y.
    2. transition: plots ten bare trendlines (quiescent, star-forming, green valley, blue quiescent, post-starburst cluster vs field) and returns the two ratios of cluster over field (quiescent and star-forming only, same as default) trends at an X or Y value specified with param:x or param:y.
    3. lit: plots two bare trendlines for full population cluster vs field. Also plots the difference between the cluster and field trends at an X or Y value specified with param:x or param:y as a function of redshift, comparing to other results in the literature (NOTE: THIS PLOT IMPLEMENTATION IS INCOMPLETE). Returns the ratio of cluster over field trends at an X or Y value specified with param:x or param:y. Note that since the function returns a tuple, the second returned parameter will be NaN for this module.

Other parameters:

    param:limitRange: boolean that reframes the plot to fit x = [9.8, 11.5] and y = [-0.75, 1.25]
    param:bootstrap: a boolean option for module 1 & 2 that plots the bootstrap uncertainty with each trend and compares the error regions (NOTE: THIS PLOT IMPLEMENTATION IS INCOMPLETE).


The EvalLineFit Method:

The evalLineFit() method generates a set of data points at a random place on an arbitrary line with random uncertainties, then fits a line to this data to determine the accuracy of the line-fitting method used. NOTE: THIS METHOD NEEDS WORK AND IS ON MY TODO LIST


The PlotMcNabPlots Method:

The plotMcNabPlots() method was created with the aim to exactly recreate several significant results regarding galaxy population counts for quiescent, star-forming, green valley, blue quiescent, and post-starburst galaxies in the GOGREEN survey from McNab et. al. 2021. When called it sets the standardCriteria member variable to be as close to the criteria used in McNab+21 as I have been able to achieve, then produces a recreation of Figure 1 & Figure 3 and Table 2 from McNab+21 along with some statistics about the difference between some of the notable values reported in McNab+21.


NOTE: OUTDATED METHODS (PUBLIC AND PRIVATE)

The following methods are outdated and will require some level of re-implementation to get working. They do not accurately reflect how the codebase is structured and should not be examined with the rest of the codebase in mind either.

    1. getMedian()
    2. makeTable()
    3. writeTable()


NOTE: UNUSED METHODS (PUBLIC AND PRIVATE)

The following methods are not currently used in the implementation but are not necessarily outdated and may be useful either as a reference or tool for future implementations.

    1. getClusterZ()
    2. getClusterGalaxies()
    3. getStdError()
    4. plotStdError()
    5. plotUncertainties()